<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!--  com.{公司/ BU }.业务线.[子业务线 ] ，最多 4 级,  子业务线可选 -->
  <groupId>com.advance.monster</groupId>
  <!-- 产品线名-模块名 -->
  <artifactId>monster-parent</artifactId>
  <!-- 主版本号.次版本号.修订号,起始版本号必须为： 1.0.0 ，而不是 0.0.1  -->
  <version>1.0.0</version>
  <packaging>pom</packaging>
 
 <!-- 子模块 -->
  <modules>
    <module>monster-api</module>
    <module>monster-crontab</module>
    <module>monster-web</module>
    <module>monster-model</module>
    <module>monster-dao</module>
    <module>monster-service</module>
    <module>monster-util</module>
  </modules>
  
  <!-- 集中定义公用的依赖版本号  这样后面的dependencies里面就可以不显式指定某些版本号 -->
  <properties>
     <!--指定Maven用什么编码来读取源码及文档-->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!--指定Maven用什么编码来呈现站点的HTML文件-->
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>
    
    <!-- jdk版本号 -->
    <jdk.version>1.7</jdk.version>
    
    <!-- jar包版本变量start  -->
    	<!-- spring的版本号     Spring MVC 属于 SpringFrameWork 的后续产品，不需要单独指明版本 -->
    <spring.version>4.3.5.RELEASE</spring.version>
    	<!-- myBatis的版本号 -->
    <mybatis.version>3.4.1</mybatis.version>
   		 <!-- MyBatis-Spring 是一个用来整合 MyBatis 和 Spring 框架的小类库 -->
    <mybatis-spring.version>1.3.0</mybatis-spring.version>
    	<!-- springAOP需要用到       需要深入研究    -->
    <aspectjweaver.version>1.8.10</aspectjweaver.version>
    	<!--  junit测试框架 -->
    <junit.version>4.12</junit.version>
    	<!-- mySql -->
    <mysql-connector-java.version>5.1.41</mysql-connector-java.version>
    	<!-- Druid连接池 来自阿里 -->
    <druid.version>1.0.27</druid.version>
        <!-- log4j -->
    <log4j-core.version>2.7</log4j-core.version>
    <slf4j.version>1.7.22</slf4j.version>
    	<!--  -->
    <javaee-api.version>7.0</javaee-api.version>
    	<!--  -->
    <javax.servlet.jsp.jstl-api.version>1.2.1</javax.servlet.jsp.jstl-api.version>
    	<!--  -->
    <javax.servlet.jsp-api.version>2.3.1</javax.servlet.jsp-api.version>
    	<!--  -->
    <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
    	<!-- 以下几个全部都是Apache的包  -->
    <commons-fileupload.version>1.3.2</commons-fileupload.version>
    <commons-io.version>2.5</commons-io.version>
    <commons-lang3.version>3.5</commons-lang3.version>
    <commons-beanutils.version>1.9.3</commons-beanutils.version>	
    	<!--  -->
    <httpclient.version>4.5.2</httpclient.version>
    	<!--  -->
    <jackson-databind.version>2.8.5</jackson-databind.version>
    	<!-- 来自阿里 -->
    <fastjson.version>1.2.23</fastjson.version>
    	<!-- netty -->
    <netty-all.version>4.1.6.Final</netty-all.version>
    	<!-- mybatis-generator -->
    <mybatis-generator-core.version>1.3.5</mybatis-generator-core.version>
    	<!-- mongo -->
    <mongo-java-driver.version>3.4.1</mongo-java-driver.version>	
    	<!-- redis-->
    <jedis.version>2.9.0</jedis.version>
    
    <spring-data-redis.version>1.7.5.RELEASE</spring-data-redis.version>
    
    <spring-data-mongodb.version>1.9.5.RELEASE</spring-data-mongodb.version>
    
    <thymeleaf.version>3.0.3.RELEASE</thymeleaf.version>
    
    <!-- jar包版本变量 end  -->
    
    
    <!-- 插件版本变量 start -->
    <!-- maven-plugin-api:自定义插件需要的依赖,暂时不用 -->
    <!-- maven-dependency-plugin:分析项目依赖插件,暂时不用 -->
    <!-- maven-archetype-plugin:生成一个很简单的项目骨架，帮助开发者快速上手 -->
    <!-- maven-surefire-plugin:执行测试的插件 -->
    <!-- exec-maven-plugin:运行任何本地的系统程序的插件 -->
    <!-- maven-source-plugin:生成源码包的插件 -->
    <!-- maven-javadoc-plugin:生成javadoc文档包的插件 -->
    	<!-- 编译插件 -->
    <maven-compiler-plugin.version>3.6.0</maven-compiler-plugin.version>
    	<!-- 打包插件 -->
    <maven-war-plugin.version>3.0.0</maven-war-plugin.version>
    	<!-- 处理资源文件插件 -->
    <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
    	<!-- 同一修改所有模块版本号的插件 -->
    <versions-maven-plugin.version>2.3</versions-maven-plugin.version>
    	<!-- mybatis-generator插件 -->
    <mybatis-generator-maven-plugin.version>1.3.5</mybatis-generator-maven-plugin.version>
    <!-- 插件版本变量 end -->
  
  </properties>
  
  <!-- 一些需用公用的依赖jar包直接引入,以供下面的模块使用,比如log4j、junit等 -->
  <dependencies>
        <!-- spring-test结合junit用于测试 -->
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-test</artifactId>
	        <version>${spring.version}</version>
	    </dependency>    
	    <!-- junit -->  
        <dependency>
	        <groupId>junit</groupId>
	        <artifactId>junit</artifactId>
	        <version>${junit.version}</version>
	        <scope>test</scope>
	    </dependency> 
	    <!-- mockito 也可以用spring-mock --> 
	    <!-- hamcrest -->

	    		
		<!-- 使用log4j 来自spring官方文档写法,包括上面spring-core里面去掉commons-logging -->
		<dependency>
	        <groupId>org.slf4j</groupId>
	        <artifactId>jcl-over-slf4j</artifactId>
	        <version>${slf4j.version}</version>
	    </dependency>
	    <dependency>
	        <groupId>org.slf4j</groupId>
	        <artifactId>slf4j-api</artifactId>
	        <version>${slf4j.version}</version>
	    </dependency>
<!-- 	    <dependency>
	        <groupId>org.slf4j</groupId>
	        <artifactId>slf4j-log4j12</artifactId>
	        <version>${slf4j.version}</version>
	    </dependency> -->
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-core</artifactId>
		    <version>${log4j-core.version}</version>
		</dependency>	
		<dependency>
	        <groupId>org.apache.logging.log4j</groupId>
	        <artifactId>log4j-api</artifactId>
	        <version>${log4j-core.version}</version>
	     </dependency>
		  <dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-slf4j-impl</artifactId>
		    <version>${log4j-core.version}</version>
		  </dependency> 	     
		
	<!-- 把所有工具类全部放在这里 -->
	    
	  
  </dependencies>
  
  <!-- maven依赖    -->
  <!-- 使用dependcyManagement标签并不会真正引入相关依赖的jar包,需要在各个模块中指定引入某个需要的jar包 -->
  <dependencyManagement>
      <dependencies>	
      
      			<!-- spring最基本的jar包 -->
		<!-- spring-beans这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-beans</artifactId>
		    <version>${spring.version}</version>
		</dependency>
		<!--  -->	    
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>${spring.version}</version>
	    </dependency>	
		<!-- spring-core这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类。 -->  
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-core</artifactId>
		    <version>${spring.version}</version>
	    </dependency>
      
      
		<!-- 这个jar文件包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-web</artifactId>
		    <version>${spring.version}</version>
		</dependency>
		<!-- 这个jar文件包含Spring MVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-webmvc</artifactId>
		    <version>${spring.version}</version>
		</dependency>
		<!--  -->
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-tx</artifactId>
		    <version>${spring.version}</version>
	    </dependency>	
		<!--  -->	    
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-orm</artifactId>
		    <version>${spring.version}</version>
	    </dependency>	 
		<!--  -->	    
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${spring.version}</version>
	    </dependency>
	    <!--这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），任务计划Scheduling（uartz）方面的类。 外部依赖spring-context-->
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <version>${spring.version}</version>
	    </dependency>	
	    <!--  -->
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aspects</artifactId>
		    <version>${spring.version}</version>
	    </dependency>
	    <!--  -->	    
	    <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aop</artifactId>
		    <version>${spring.version}</version>
	    </dependency>
	    <!--提供对 AspectJ 的支持，是 spring-aspects 所需要依赖的-->
	    <dependency>
	        <groupId>org.aspectj</groupId>
	        <artifactId>aspectjweaver</artifactId>
	        <version>${aspectjweaver.version}</version>
	    </dependency>	    	      
      	  
		<!-- mybatis相关 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>${mybatis.version}</version>
		</dependency>
		<!--  -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>${mybatis-spring.version}</version>
		</dependency>
		
		<!-- Mysql、数据源相关-->		
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>${mysql-connector-java.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>druid</artifactId>
		    <version>${druid.version}</version>
		</dependency>

	    <!-- servlet相关 -->
		<dependency>
		    <groupId>javax.servlet.jsp.jstl</groupId>
		    <artifactId>javax.servlet.jsp.jstl-api</artifactId>
		    <version>${javax.servlet.jsp.jstl-api.version}</version>
		</dependency>
	    <dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>${javax.servlet-api.version}</version>
	    </dependency>
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>${javax.servlet.jsp-api.version}</version>
		</dependency>
		
 
	     <!-- java ee jar 包 -->
	    <dependency>
	        <groupId>javax</groupId>
	        <artifactId>javaee-api</artifactId>
	        <version>${javaee-api.version}</version>
	    </dependency>    
	    
		<dependency>
		    <groupId>org.mongodb</groupId>
		    <artifactId>mongo-java-driver</artifactId>
		    <version>${mongo-java-driver.version}</version>
		</dependency>
		
		<dependency>
		    <groupId>redis.clients</groupId>
		    <artifactId>jedis</artifactId>
		    <version>${jedis.version}</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-redis</artifactId>
		    <version>${spring-data-redis.version}</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-mongodb</artifactId>
		    <version>${spring-data-mongodb.version}</version>
		</dependency>
		
	   
	    	    <!--JSON处理-->
	    <dependency>
	        <groupId>com.fasterxml.jackson.core</groupId>
	        <artifactId>jackson-databind</artifactId>
	        <version>${jackson-databind.version}</version>
	    </dependency>      
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>${fastjson.version}</version>
		</dependency>

	    <!--apache工具包-->
	    <dependency>
	        <groupId>org.apache.commons</groupId>
	        <artifactId>commons-lang3</artifactId>
	        <version>${commons-lang3.version}</version>
	    </dependency>
	    <dependency>
	        <groupId>commons-fileupload</groupId>
	        <artifactId>commons-fileupload</artifactId>
	        <version>${commons-fileupload.version}</version>
	    </dependency>   
	    <dependency>
	        <groupId>commons-io</groupId>
	        <artifactId>commons-io</artifactId>
	        <version>${commons-io.version}</version>
	    </dependency>	  
      
      </dependencies>
  
  </dependencyManagement>
  
  <build>
      <finalName>${project.artifactId}</finalName>
      
      <resources>
      	    <!-- 资源文件目录:各种properties文件 -->  
      	  <resource>
      	  	  <directory>${basedir}/src/main/resources/properties/${profiles.active}</directory>
      	  	  <includes>
      	  	  	<include>*.properties</include>
      	  	  	<include>*.xml</include>      	  	  	
      	  	  </includes>
      	  </resource>
      	    <!-- 资源文件目录:spring、mvc、mybatis的xml文件 -->
      	  <resource>
      	  	  <directory>${basedir}/src/main/resources</directory>
      	  	  <includes>
      	  	  	<include>*.properties</include>      	  	  
      	  	  	<include>*.xml</include>
      	  	  	<include>mappers/*.xml</include>
      	  	  </includes>
      	  </resource>      	  
      </resources>
      
      <plugins>
      <!-- 这三个插件放在外面,给子模块继承通用 -->
  		  <!-- 编译插件 -->
  	      <plugin>
      	      <groupId>org.apache.maven.plugins</groupId>
		      <artifactId>maven-compiler-plugin</artifactId>
		      <version>${maven-compiler-plugin.version}</version>
		      <configuration>
		          <source>${jdk.version}</source>
		          <target>${jdk.version}</target>
		          <encoding>UTF-8</encoding>
		          <showWarnings>true</showWarnings>
		   </configuration>
  	      </plugin>
  	      <!-- 修改版本号插件 -->
  	      <plugin>
		      <groupId>org.codehaus.mojo</groupId>
			  <artifactId>versions-maven-plugin</artifactId>
			  <version>${versions-maven-plugin.version}</version>
  	      </plugin>  
  	      <!-- 拷贝资源文件插件 -->
  	      <plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-resources-plugin</artifactId>
			    <version>${maven-resources-plugin.version}</version>
  	      </plugin>    
      </plugins>
      
      <pluginManagement>
      	  <plugins>
      	      <!-- 打包插件,这个模块每个项目单独指定引入,像model、dao、service、util都不需要打war包,所以那几个不需要引入 -->
      	      <plugin>
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-war-plugin</artifactId>
				    <version>${maven-war-plugin.version}</version>
      	      </plugin>
      	      <!-- mybatis半自动的插件 -->
      	      <plugin>
			      <groupId>org.mybatis.generator</groupId>
			      <artifactId>mybatis-generator-maven-plugin</artifactId>
			      <version>${mybatis-generator-maven-plugin.version}</version>
      	      </plugin>
      	  </plugins>
      </pluginManagement>
  
  </build>
  
  
   <profiles>
	   <profile>
	        <!-- 本地开发环境 -->
	        <id>dev</id>
	        <properties>
	            <profiles.active>dev</profiles.active>
	        </properties>
	        <activation>
	            <activeByDefault>true</activeByDefault>
	        </activation>
	    </profile>
	    <profile>
	        <!-- 测试环境 -->
	        <id>test</id>
	        <properties>
	            <profiles.active>test</profiles.active>
	        </properties>
	    </profile>
	    <profile>
	        <!-- 生产环境 -->
	        <id>pro</id>
	        <properties>
	            <profiles.active>pro</profiles.active>
	        </properties>
	    </profile>
    </profiles>  
  
</project>