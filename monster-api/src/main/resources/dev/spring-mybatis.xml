<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/context  
	   http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
		<!-- 读取mysql配置文件 -->
		<!-- 
 	<context:property-placeholder location="classpath:jdbc.properties" /> 
 	 -->
	
	<bean id="log4j2" class="com.alibaba.druid.filter.logging.Log4j2Filter">
        <property name="connectionLogEnabled" value="false"/>
        <property name="statementLogEnabled" value="false"/>
        <property name="resultSetLogEnabled" value="true"/>
        <property name="statementExecutableSqlLogEnable" value="true"/>	    
	</bean>	
	
	<!-- 配置druid数据源      还需要咨询研究官方文档-->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	  <property name="url" value="${db.jdbcUrl}" />
	  <property name="username" value="${db.user}" />
	  <property name="password" value="${db.password}" />

	  <!-- 初始化连接大小 -->
	  <property name="initialSize" value="1" />
	  <!-- 连接池最大使用连接数量 -->
	  <property name="maxActive" value="20" />
	  <!-- 连接池最小空闲连接数 -->
	  <property name="minIdle" value="1" />
	  <!-- 在抛出异常之前获取连接最大等待时间 -->
	  <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />
    
      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

	  <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />
   
      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
   
      <!-- 配置监控统计拦截的filters  如果实现不了就换成proxy-->
      <!--  
      <property name="filters" value="stat,log4j2"/> 
      -->
	</bean>

	
	
	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mappers/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 獲取sqlsession  -->
	<bean id="sqlSessionSimple" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 獲取sqlsession  -->
	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
  		<constructor-arg index="1" value="BATCH" />
	</bean>
	
	
	<!--   配置這個之後就不需要寫DAO層的實現類了,但是為了靈活,我們默認關閉這個   markerInterface用于多个数据源的配置-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ifaxin.api.dao" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionSimple" ></property>
		<property name="markerInterface" value="com.ifaxin.api.dao.BaseMapper"></property> 
	</bean> 
	
	   
</beans>